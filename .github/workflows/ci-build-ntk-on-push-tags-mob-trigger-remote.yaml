name: CI Call API NTK on Push TAG
on:
  workflow_call:

jobs:
  logLatestRelease:
    name: Call API
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # permissions:
    #   contents: read
    #   packages: write
    permissions: write-all
    steps:
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: novaittestteam
          repo: ntk.mob
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: octokit/request-action@v2.x
      #   id: push_tag
      #   with:
      #     route: POST /repos/{owner}/{repo}/git/tags
      #     owner: novaittestteam
      #     repo: ntk.mob
      #     body: ${{ toJSON(env.REQUEST_BODY) }}
      #     mediaType: |
      #       format: raw
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REQUEST_BODY: |
      #       {"tag":"build-apk","message":"Auto API Call","object":"4c64ded9bed5633f4918ea0284be44c4f85541c4","type":"commit","tagger":{"name":"AutoAPICall","email":"support@novait.com.ua"}}

      # - uses: octokit/request-action@v2.x
      #   id: push_tag
      #   with:
      #     route: POST /repos/{owner}/{repo}/git/refs
      #     owner: novaittestteam
      #     repo: ntk.mob
      #     mediaType: |
      #       format: raw
      #   input:  |
      #     ref: refs/heads/build-apk
      #     sha: 4c64ded9bed5633f4918ea0284be44c4f85541c4
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: actions/github-script@v7 #THIS IS WORK
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: 'ntk.mob',
      #         ref: 'refs/tags/build-apk',
      #         sha: '4c64ded9bed5633f4918ea0284be44c4f85541c4'
      #       })

      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: '20.x'

      # - run: npm install @octokit/auth-app


      # - uses: actions/github-script@v7 
      #   id: get-token
      #   with:
      #     debug: true
      #     script: |
      #       const pkey = '${{ secrets.PKEY }}'
      #       const { createAppAuth } = require("@octokit/auth-app");
      #       const auth = createAppAuth({
      #         appId: 809726,
      #         privateKey: pkey,
      #       });
            
      #       const installationAuthentication  = await auth ({
      #           type: "installation",
      #           installationId: 46669197,
        
      #       });
      #       return installationAuthentication.token

      # - name: Get result
      #   run: echo "${{steps.get-token.outputs.result}}"


      - uses: actions/github-script@v7 
        with:
          github-token: 'ghs_affmBfbNLiSlsu7UVVNichBf7Evjpr4LBU6R'
          debug: 'true'
          script: |
            const fs = require('fs');
            const ref =  'heads/main';
            const repo = 'ntk.mob'
            const author = {
                name: 'Autodeploy Call',
                email: 'support@novait.com.ua',
            };
            //https://codelounge.dev/getting-started-with-the-githubs-rest-api
            async function generateGithubPubProc() {
                try {
                    
                    let commits = await github.rest.repos.listCommits({
                        owner: context.repo.owner,
                        repo,
                    });
                    latestCommitSHA = commits.data[0].sha
                    let versionJson = await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo,
                        path: 'version.json',
                        ref: latestCommitSHA
                    });

                    file = JSON.parse(Buffer.from(versionJson.data.content, versionJson.data.encoding).toString());
                    nextVersion = parseInt(file.version.split(".", 2)[0]) + '.' + (parseInt(file.version.split(".", 2)[1]) + 1)
                    nextLink = 'https://github.com/' + context.repo.owner + '/' + repo + '/releases/download/NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}/android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip'
                    nextContent = { version: nextVersion, link: nextLink }
                    const files = [{
                        mode: '100644',
                        path: 'version.json',
                        content: JSON.stringify(nextContent),
                    }];

                    let { data: { sha: treeSHA }, } = await github.rest.git.createTree ({
                        owner: context.repo.owner,
                        repo,
                        tree: files,
                        base_tree: latestCommitSHA,
                    });
                    let { data: { sha: newCommitSHA  }, } = await github.rest.git.createCommit({
                        owner: context.repo.owner,
                        repo,
                        author,
                        tree: treeSHA,
                        message: 'Autocreated by CI',
                        parents: [latestCommitSHA],
                    }); 
                    let result = await github.rest.git.updateRef({
                        owner: context.repo.owner,
                        repo,
                        ref,
                        sha: newCommitSHA,
                    });

                } catch (e) {
                console.log(e)
                console.log('Error Request: ' + JSON.stringify(e.request))
                console.log('Error Status: ' + e.status)
                console.log('Error Response: ' + JSON.stringify(e.response))

                }
              };

              generateGithubPubProc();


            





      # - uses: actions/github-script@v6
      #   with:
      #       script: |
      #         await github.rest.actions.createworkflowDispatch({
      #             owner: 'guidemetothemoon',
      #             repo: 'ntk.mob',
      #             workflow_id: 'repob-workflow.yml',
      #             ref: 'main'
      #         })  

      # - run: "echo Push response: '${{ steps.push_tag.outputs.data }}'"

      # - run: "echo Push status: '${{ steps.push_tag.outputs.status }}'"
      #   if: ${{ failure() }}