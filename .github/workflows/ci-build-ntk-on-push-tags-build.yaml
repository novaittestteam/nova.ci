name: CI Build NTK on Push TAG
on:
  workflow_call:

defaults:
  run:
    working-directory: /home/runner/work/

jobs:
  # linter: 
  #   name: Linter
  #   runs-on: self-hosted
  #   environment: ${{ inputs.environment }}
  #   outputs:
  #     LINTER_CHECK: ${{ steps.linter_res.outputs.LINTER_CHECK }} 
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: üíø Setup NODEJS
  #       uses: actions/setup-node@v3
  #       id: node_inst
  #       with:
  #         node-version: 18

  #     - name: ‚ñ∂Ô∏è Install Node.js dependencies
  #       run: |
  #         npm i eslint-plugin-security
  #         npm i @typescript-eslint/eslint-plugin

  #     - name: üá™üá∏ Lint SRC
  #       id: linter
  #       run: npx eslint --ext .js,.vue,.ts --ignore-path .gitignore . --quiet

  #     - name: End Linter Step
  #       if: success() || failure()
  #       id: linter_res
  #       run: |
  #         if [[ ${{ steps.linter.outcome  }} == 'success' ]];
  #         then
  #           echo "LINTER_CHECK=‚úÖOK" | tee -a $GITHUB_OUTPUT
  #         else
  #           echo "LINTER_CHECK=‚ùåFAILED" | tee -a $GITHUB_OUTPUT
  #         fi

  # security:
  #   name: Security
  #   runs-on: self-hosted
  #   permissions:
  #     actions: write
  #     contents: read
  #     packages: write
  #     security-events: write
  #   environment: ${{ inputs.environment }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: üíø Setup NODEJS
  #       uses: actions/setup-node@v3
  #       id: node_inst
  #       with:
  #         node-version: '18'

  #     - name: Yarn Install
  #       run: |
  #         curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
  #         echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
  #         sudo apt-get update && sudo apt-get install yarn -y
  #         export PATH="$(yarn global bin):$PATH"
  #         yarn install

  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       continue-on-error: true # To make sure that SARIF upload gets called
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         args: --sarif-file-output=snyk.sarif
      
  #     - name: check sarif
  #       run: |
  #         ls -la /runner/_work/novatalks.engine/novatalks.engine
  #         cat ./snyk.sarif
        
  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: snyk.sarif

  build-image:
    name: Build Image
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # if: always()
    # needs: [linter]
    # permissions:
    #   contents: read
    #   packages: write
    outputs:
      REP_NAME: ${{ steps.prep.outputs.REP_NAME }}
      SHORT_SHA: ${{ steps.prep.outputs.SHORT_SHA }} 
      SHORT_REF_NAME: ${{ steps.prep.outputs.SHORT_REF_NAME }}
      RELEASE: ${{ steps.prep.outputs.RELEASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Prepare Vars
        id: prep
        run: |
          echo "REP_NAME=`echo ${GITHUB_REPOSITORY} | cut -d "/" -f2 `" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "RELEASE=`echo $(date +'%Y_R%q')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "SHORT_REF_NAME=`echo ${{ github.ref_name }}`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "SHORT_REF_NAME=`echo ${{ github.event.base_ref }} | cut -d "/" -f3`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi


      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          #username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub Container Registry 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.CR_DH_USERNAME }}
          password: ${{ secrets.CR_DH_TOKEN_RW }}

      # - name: Set up Docker Context for Buildx
      #   id: buildx-context
      #   run: |
      #     docker context create builder


      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        env:
          DOCKER_TLS_CERTDIR: ""
        with:
          install: true
          endpoint: tcp://localhost:2376
          buildkitd-flags: --debug
          cleanup: false
 
      - name: Build and push
        uses: docker/build-push-action@v5
        id: main_build_proc
        with:
          #context: .
          file: ./docker/server.Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          target: main
          tags: | 
            ghcr.io/${{ github.repository_owner }}/${{ env.REP_NAME }}:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
            ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}-test:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
      
      - name: Debug
        run: /bin/sleep 10000

      # - name: Push image to GHCR
      #   if: ${{ contains( github.event.base_ref, 'main' ) }}
      #   run: |
      #     docker buildx imagetools create \
      #       --tag ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}-test:latest \
      #       ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}-test:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }} 
        

  # notify-telegram:
  #   name: Notifier
  #   runs-on: self-hosted
  #   if: always()
  #   needs: [build-image]
  #   steps:

  #     - name: Set Telegram Message
  #       uses: haya14busa/action-cond@v1
  #       id: telegram_message
  #       with:
  #         cond: ${{ contains(join(needs.*.result, ','), 'success') }}
  #         if_true: |
  #           üë∑ ${{ github.actor }} created deploy tag.
            
  #           Image assembly has been completed ‚úÖ
            
  #           ‚ñ∂Ô∏è Docker Registry: ${{ secrets.CR_DH_USERNAME }}/${{ needs.build-image.outputs.REP_NAME }}
  #           üîó docker pull docker.io/${{ secrets.CR_DH_USERNAME }}/${{ needs.build-image.outputs.REP_NAME }}:${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}
  #           ‚ñ∂Ô∏è GitHub Registry: ghcr.io/${{ github.repository_owner }}/${{ needs.build-image.outputs.REP_NAME }}
  #           üîó docker pull ghcr.io/${{ github.repository_owner }}/${{ needs.build-image.outputs.REP_NAME }}:${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}

  #           üîµ Image Name: ${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}

  #           ESLinter Check Status: ${{ needs.linter.outputs.LINTER_CHECK }}

  #           Repository: ${{ github.repository }}  
  #           See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
  #         if_false: |
  #           üë∑ ${{ github.actor }} created deploy tag.
            
  #           ‚ùåBuild Failed

  #           ESLinter Check Status: ${{ needs.linter.outputs.LINTER_CHECK }}
            
  #           Repository: ${{ github.repository }}  
    
  #     - name: Send to Telegram
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TG_NOTIFICATION_BOT_ID }}
  #         token: ${{ secrets.TG_NOTIFICATION_BOT_TOKEN }}
  #         message: ${{ steps.telegram_message.outputs.value }}
