name: CI Build NTK Moblie Apps on Push TAG
on:
  workflow_call:

jobs:
  build-widget:
    name: Build NovaTalks Widget
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # permissions:
    #   contents: read
    #   packages: write
    outputs:
      REP_NAME: ${{ steps.prep.outputs.REP_NAME }}
      SHORT_SHA: ${{ steps.prep.outputs.SHORT_SHA }} 
      SHORT_REF_NAME: ${{ steps.prep.outputs.SHORT_REF_NAME }}
      RELEASE: ${{ steps.prep.outputs.RELEASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Vars
        id: prep
        run: |
          echo "REP_NAME=`echo ${GITHUB_REPOSITORY} | cut -d "/" -f2 `" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "RELEASE=`echo $(date +'%Y_R%q')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "SHORT_REF_NAME=`echo ${{ github.ref_name }}`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "SHORT_REF_NAME=`echo ${{ github.event.base_ref }} | cut -d "/" -f3`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi

      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üíø Setup NODEJS
        uses: actions/setup-node@v3
        id: node_inst
        with:
          node-version: '18'

      - name: Setup Components & Build
        env:
          UV_THREADPOOL_SIZE: 2
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get update && sudo apt-get install yarn -y
          yarn install
          yarn build     
          zip -r ./widget-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip ./dist

      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: NTK.CHATWIDGET_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
          release_name: NTK.CHATWIDGET_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
          body: Automated Deployment
          draft: false
          prerelease: false
        
      - name: Upload a Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./widget-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
          asset_name: widget-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
          asset_content_type: appliction/zip

      - name: End Step On Failure
        if: failure()
        id: end_step
        run: echo "END_STEP_JOB_ID=`echo ${{ github.run_id }}`" | tee -a $GITHUB_OUTPUT  

  notify-telegram:
    name: Notifier
    runs-on: self-hosted
    if: always()
    needs: [build-widget]
    steps:

      - name: Set Telegram Message
        uses: haya14busa/action-cond@v1
        id: telegram_message
        with:
          cond: ${{ contains(join(needs.build-widget.result, ','), 'success') }}
          if_true: |
            üë∑ ${{ github.actor }} created deploy tag.
            
            Image building has been completed ‚úÖ
            
            Download Link: https://github.com/novaitdevteam/novatalks.chatwidget/releases/download/NTK.CHATWIDGET_${{ needs.build-widget.outputs.RELEASE }}_${{ needs.build-widget.outputs.SHORT_REF_NAME }}_${{ needs.build-widget.outputs.SHORT_SHA }}/widget-release-${{ needs.build-widget.outputs.SHORT_REF_NAME }}-${{ needs.build-widget.outputs.SHORT_SHA }}.zip

            Repository: ${{ github.repository }}  
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
          if_false: |
            üë∑ ${{ github.actor }} created deploy tag.
            
            ‚ùåBuild Failed
            
            üîó See Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.build-widget.outputs.END_STEP_JOB_ID}}
            Repository: ${{ github.repository }}  
    
      - name: Send to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_NOTIFICATION_BOT_ID }}
          token: ${{ secrets.TG_NOTIFICATION_BOT_TOKEN }}
          message: ${{ steps.telegram_message.outputs.value }}

      - name: Send Message To GChat
        uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: 'true'
          script: |
            async function webhook() {
              const url = "${{ secrets.GC_NOTIFICATION_WEBHOOK }}"
              const res = await fetch(url, {
                method: "POST",
                headers: {"Content-Type": "application/json; charset=UTF-8"},
                body: JSON.stringify({text: `${{ steps.telegram_message.outputs.value }}`})
              });
              return await res.json();
            }
            
            webhook();
