name: CI Build NTK Moblie Apps on Push TAG
on:
  workflow_call:

jobs:
  build-apk:
    name: Build APK
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # permissions:
    #   contents: read
    #   packages: write
    outputs:
      REP_NAME: ${{ steps.prep.outputs.REP_NAME }}
      SHORT_SHA: ${{ steps.prep.outputs.SHORT_SHA }} 
      SHORT_REF_NAME: ${{ steps.prep.outputs.SHORT_REF_NAME }}
      RELEASE: ${{ steps.prep.outputs.RELEASE }}
      TIMESTAMP: ${{ steps.prep.outputs.TIMESTAMP }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Vars
        id: prep
        run: |
          echo "REP_NAME=`echo ${GITHUB_REPOSITORY} | cut -d "/" -f2 `" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "RELEASE=`echo $(date +'%Y_R%q')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "TIMESTAMP=`echo $(date +'%Y%m%d%H%M')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "SHORT_REF_NAME=`echo ${{ github.ref_name }}`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "SHORT_REF_NAME=`echo ${{ github.event.base_ref }} | cut -d "/" -f3`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi

      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         
      

      - name: 💿 Setup NODEJS
        uses: actions/setup-node@v3
        id: node_inst
        with:
          node-version: '18'

      - name: 💿 Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
    
      - name: 💿 Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.0.2

      - name: 💿 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Generating Release Key From Secrets
        run: |
          echo "${{ secrets.ANDROID_APK_PEM }}" > cert.pem
          openssl pkcs12 -export -out release.p12 -in cert.pem -password pass:${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} -name ntk-ui-lite-release-key
          keytool -v -importkeystore -srckeystore ./release.p12 -srcstoretype PKCS12  -destkeystore ./release-key.keystore -deststoretype JKS -storepass ${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} -keypass ${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} -srcstorepass ${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} --srcalias ntk-ui-lite-release-key -destalias ntk-ui-lite-release-key

      # - name: Generating Release Key
      #   run: |
      #     keytool -genkey -dname "cn=NovaitDevTeam, ou=IT, o=NovaIT, l=Kyiv, st=Kyiv, c=UA" -v -keystore ./release-key.keystore -alias ntk-ui-lite-release-key -keyalg RSA -keysize 2048 -validity 20000 -storepass android -keypass android
      #     ls -la ./

      - name: Displaying debug.keystore file
        run: |
          keytool -list -v -keystore ./release-key.keystore -alias ntk-ui-lite-release-key -storepass ${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} -keypass ${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }}

      - name: Add APK Version
        run: |
          ver=""; 
          while read -r line; do param=( $line ); if [[ "${param[0]}" == "novatalksVersion" ]]; then ver=${param[2]}; fi; done < ./src-capacitor/android/variables.gradle
          if [ -z "$ver" ];
          then
              sed -i "2i \    \ novatalksVersion = 'novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}'" ./src-capacitor/android/variables.gradle            
          else
              sed -i s/$ver/\'novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}\'/g ./src-capacitor/android/variables.gradle
          fi;
          cat ./src-capacitor/android/variables.gradle

      - name: Change versionCode
        run: |
          vercode=""; 
          while read -r line; do param=( $line ); if [[ "${param[0]}" == "versionCode" ]]; then vercode=${param[1]}; fi; done < ./src-capacitor/android/app/build.gradle
          if [ -z "$vercode" ];
          then
              sed -i "11i \    \ versionCode 1" ./src-capacitor/android/app/build.gradle       
          else
              sed -i s/'versionCode '$vercode/'versionCode '$(expr $vercode + 1)/g ./src-capacitor/android/app/build.gradle
          fi;
          cat ./src-capacitor/android/app/build.gradle
        

      - name: Setup Components & Build
        env:
          ANDROID_HOME: '/home/runner/.android/sdk'
          ANDROID_SDK_ROOT: '/home/runner/.android/sdk'
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get update && sudo apt-get install yarn -y
          export PATH="$(yarn global bin):$PATH"
          export PATH=$ANDROID_SDK_ROOT/platform-tools/:$PATH
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/:$PATH
          export PATH=$ANDROID_SDK_ROOT/emulator/:$PATH
          export PATH=$ANDROID_SDK_ROOT/build-tools/:$PATH
          yarn global add quasar
          yarn global add @quasar/cli
          yarn global add @quasar/icongenie
          npm install
          yarn run icongenie:android
          chmod +x ./src-capacitor/android/gradlew
          quasar build -m capacitor -T android -- bundleRelease
          mv ./src-capacitor/android/app/build/outputs/apk/release/app-release-unsigned.apk ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.apk
          mv ./src-capacitor/android/app/build/outputs/bundle/release/app-release.aab ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.aab
          $(find $ANDROID_SDK_ROOT -name apksigner) sign --ks ./release-key.keystore --ks-key-alias ntk-ui-lite-release-key --ks-pass pass:${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} --key-pass pass:${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.apk
          $(find $ANDROID_SDK_ROOT -name apksigner) sign --ks ./release-key.keystore --ks-key-alias ntk-ui-lite-release-key --ks-pass pass:${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} --key-pass pass:${{ secrets.ANDROID_APK_P12_KEYSTORE_PASSWORD }} --min-sdk-version 22 --v1-signing-enabled true --v2-signing-enabled true ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.aab
          $(find $ANDROID_SDK_ROOT -name apksigner) verify --print-certs ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.apk
          zip novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.zip ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.apk ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.aab

      - name: Create an Internal Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
          release_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
          body: Automated Deployment
          draft: false
          prerelease: false
        
      - name: Upload an Internal Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.zip
          asset_name: novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.zip
          asset_content_type: application/zip

      - name: Publish Pre-Release to External Pub Repo
        uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.CI_GITHUB_PAT }}
          debug: 'true'
          script: |
            const fs = require('fs');
            const ref =  'heads/main';
            const repo = 'novatalks.mobile'
            const author = {
                name: 'Autodeploy Call',
                email: 'support@novait.com.ua',
            };
            async function generateGithubRelease() {
                try {                 
                    let release = await github.rest.repos.createRelease({
                      owner: context.repo.owner,
                      repo,
                      prerelease: true,
                      name: 'GIT_NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}',
                      tag_name: 'GIT_NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}',
                    });
                    releaseID = release.data.id
                    releaseFilePath = './novatalks.mobile_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.TIMESTAMP }}.apk'
                    let uploadAPK = await github.rest.repos.uploadReleaseAsset({
                        owner: context.repo.owner,
                        repo,
                        release_id: releaseID,
                        name: 'novatalks.mobile.apk',
                        data: fs.readFileSync(releaseFilePath),
                      });         
                    return result;
                } catch (e) {
                console.log(e)
                }
              };
              generateGithubRelease();

      - name: End Step On Failure
        if: failure()
        id: end_step
        run: echo "END_STEP_JOB_ID=`echo ${{ github.run_id }}`" | tee -a $GITHUB_OUTPUT  

  notify-telegram:
    name: Notifier
    runs-on: self-hosted
    if: always()
    needs: [build-apk]
    steps:

      - name: Set Telegram Message
        uses: haya14busa/action-cond@v1
        id: telegram_message
        with:
          cond: ${{ contains(join(needs.build-apk.result, ','), 'success') }}
          if_true: |
            👷 ${{ github.actor }} created deploy tag.
            
            Image building has been completed ✅
            Download Link: https://github.com/novaitdevteam/novatalks.ui-lite/releases/download/NTK.UI-LITE_${{ needs.build-apk.outputs.RELEASE }}_${{ needs.build-apk.outputs.SHORT_REF_NAME }}_${{ needs.build-apk.outputs.SHORT_SHA }}/novatalks.mobile_${{ needs.build-apk.outputs.RELEASE }}_${{ needs.build-apk.outputs.SHORT_REF_NAME }}_${{ needs.build-apk.outputs.TIMESTAMP }}.zip
            🔗 Public Download Link: https://github.com/novaitdevteam/novatalks.mobile/releases/download/GIT_NTK.UI-LITE_${{ needs.build-apk.outputs.RELEASE }}_${{ needs.build-apk.outputs.SHORT_REF_NAME }}_${{ needs.build-apk.outputs.SHORT_SHA }}/novatalks.mobile.apk

            Repository: ${{ github.repository }}  
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
          if_false: |
            👷 ${{ github.actor }} created deploy tag.
            
            ❌Build Failed
            
            🔗 See Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.build-apk.outputs.END_STEP_JOB_ID}}
            Repository: ${{ github.repository }}  
    
      - name: Send to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_NOTIFICATION_BOT_ID }}
          token: ${{ secrets.TG_NOTIFICATION_BOT_TOKEN }}
          message: ${{ steps.telegram_message.outputs.value }}

      - name: Send Message To GChat
        uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: 'true'
          script: |
            async function webhook() {
              const url = "${{ secrets.GC_NOTIFICATION_WEBHOOK }}"
              const res = await fetch(url, {
                method: "POST",
                headers: {"Content-Type": "application/json; charset=UTF-8"},
                body: JSON.stringify({text: `${{ steps.telegram_message.outputs.value }}`})
              });
              return await res.json();
            }
            
            webhook();