name: CI Build NTK on Push TAG
on:
  workflow_call:

jobs:
  build-apk:
    name: Build APK
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # permissions:
    #   contents: read
    #   packages: write
    outputs:
      REP_NAME: ${{ steps.prep.outputs.REP_NAME }}
      SHORT_SHA: ${{ steps.prep.outputs.SHORT_SHA }} 
      SHORT_REF_NAME: ${{ steps.prep.outputs.SHORT_REF_NAME }}
      RELEASE: ${{ steps.prep.outputs.RELEASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Vars
        id: prep
        run: |
          echo "REP_NAME=`echo ${GITHUB_REPOSITORY} | cut -d "/" -f2 `" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "RELEASE=`echo $(date +'%Y_R%q')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "SHORT_REF_NAME=`echo ${{ github.ref_name }}`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "SHORT_REF_NAME=`echo ${{ github.event.base_ref }} | cut -d "/" -f3`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi


      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      

      - name: ðŸ’¿ Setup NODEJS
        uses: actions/setup-node@v3
        id: node_inst
        with:
          node-version: '18'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
    
      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.0.2

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3


      - name: Generating Release Key
        run: |
          keytool -genkey -dname "cn=NovaitDevTeam, ou=IT, o=NovaIT, l=Kyiv, st=Kyiv, c=UA" -v -keystore ./release-key.keystore -alias ntk-ui-lite-release-key -keyalg RSA -keysize 2048 -validity 20000 -storepass android -keypass android
          ls -la ./

      - name: Displaying debug.keystore file
        run: |
          keytool -list -v -keystore ./release-key.keystore -alias ntk-ui-lite-release-key -storepass android -keypass android

        

      - name: Setup Components & Build
        env:
          ANDROID_HOME: '/home/runner/.android/sdk'
          ANDROID_SDK_ROOT: '/home/runner/.android/sdk'


        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get update && sudo apt-get install yarn -y
          export PATH="$(yarn global bin):$PATH"
          export PATH=$ANDROID_SDK_ROOT/platform-tools/:$PATH
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/:$PATH
          export PATH=$ANDROID_SDK_ROOT/emulator/:$PATH
          export PATH=$ANDROID_SDK_ROOT/build-tools/:$PATH
          echo "Step 0"
          yarn global add quasar
          yarn global add @quasar/cli
          yarn install
          echo "Step 1"
          quasar --version
          echo "Step2"
          chmod +x ./src-capacitor/android/gradlew
          quasar build -m capacitor -T android
          $(find $ANDROID_SDK_ROOT -name apksigner) sign --ks ./release-key.keystore --ks-key-alias ntk-ui-lite-release-key --ks-pass pass:android --key-pass pass:android ./src-capacitor/android/app/build/outputs/apk/release/app-release-unsigned.apk
          zip -r --junk-paths ./android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip ./src-capacitor/android/app/build/outputs/apk/release/
          cp ./android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip /home/runner/work/
          
#          echo "BUILD=`echo $(find ~+ -name android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip)`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT

#          $(find $ANDROID_SDK_ROOT -name apksigner) verify --print-certs ./src-capacitor/android/app/build/outputs/apk/release/app-release-unsigned.apk
#          zip -r --junk-paths ./android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip ./src-capacitor/android/app/build/outputs/apk/debug/

#          chmod +x ./src-capacitor/android/gradlew
#          mkdir -p ./src-capacitor/android/
#          $(find /home/runner/gradle-installations/ -name gradle) wrapper --project-dir=./src-capacitor/android
#          chmod +x ./src-capacitor/android/gradlew
#          ls -la ./src-capacitor/android/


      # - name: Setup Components
      #   run: |
      #     curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      #     echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      #     sudo apt-get update && sudo apt-get install yarn -y
      #     yarn --version
      #     export PATH="$(yarn global bin):$PATH"
      #     yarn install
      #     mkdir ./src-capacitor
      #     touch ./src-capacitor/capacitor.config.json
      #     echo "{\"appId\": \"ntk.ui.lite\", \"appName\": \"novatalks-ui-lite\", \"webDir\": \"www\" }" > ./src-capacitor/capacitor.config.json
      #     cat ./src-capacitor/capacitor.config.json
      #     yarn global add quasar
      #     yarn global add @quasar/cli
      #     quasar --version
      #     quasar build -m capacitor -T android --skip-pkg
      #     chmod +x ./src-capacitor/android/gradlew

      # - name: Gradle Android
      #   uses: vgaidarji/android-github-actions-build@v1.0.1
      #   with:
      #     args: ./src-capacitor/android/gradlew --project-dir=./src-capacitor/android assembleDebug
      
      # - run: zip -r ../android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip ./src-capacitor/android/app/build/outputs/apk/debug/


 #     - run: zip -r --junk-paths ./android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip ./src-cordova/platforms/android/app/build/outputs/apk/release/
  
    
      # - name: Create a Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
      #     release_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
      #     body: Automated Deployment
      #     draft: false
      #     prerelease: false

      # - name: Upload a Release Asset
      #   id: upload_release_asset
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
      #     asset_name: android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
      #     asset_content_type: appliction/zip


      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'novaittestteam/ntk.mob'
          github-server-url: https://github.com/novaittestteam/ntk.mob
          path: ./ntk.mob

      # - name: Debug
      #   run: echo ${{ env.BUILD }}

      # - name: Create a Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
      #     release_name: NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}
      #     body: Automated Deployment
      #     draft: false
      #     prerelease: false

      # - name: Upload a Release Asset
      #   id: upload_release_asset
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: /home/runner/work/android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
      #     asset_name: android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip
      #     asset_content_type: appliction/zip   
        
      - uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          script: |
            const ref =  'heads/main';
            const owner = 'novaittestteam'
            const repo = 'ntk.mob'
            const author = {
                name: 'Autodeploy Call',
                email: 'support@novait.com.ua',
            };
            //https://codelounge.dev/getting-started-with-the-githubs-rest-api
            async function generateGithubPubProc() {
                try {
                    
                    let commits = await github.rest.repos.listCommits({
                        owner,
                        repo,
                    });
                    latestCommitSHA = commits.data[0].sha
                    let versionJson = await github.rest.repos.getContent({
                        owner,
                        repo,
                        path: 'version.json',
                        ref: latestCommitSHA
                    });

                    file = JSON.parse(Buffer.from(versionJson.data.content, versionJson.data.encoding).toString());
                    nextVersion = parseInt(file.version.split(".", 2)[0]) + '.' + (parseInt(file.version.split(".", 2)[1]) + 1)
                    nextLink = 'https://github.com/novaittestteam/ntk.mob/releases/download/NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}/android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip'
                    nextContent = { version: nextVersion, link: nextLink }
                    console.log(nextVersion);
                    const files = [{
                        mode: '100644',
                        path: 'version.json',
                        content: JSON.stringify(nextContent),
                    }];

                    let { data: { sha: treeSHA }, } = await github.rest.git.createTree ({
                        owner,
                        repo,
                        tree: files,
                        base_tree: latestCommitSHA,
                    });
                    let { data: { sha: newCommitSHA  }, } = await github.rest.git.createCommit({
                        owner,
                        repo,
                        author,
                        tree: treeSHA,
                        message: 'Autocreated by CI',
                        parents: [latestCommitSHA],
                    }); 
                    let result = await github.rest.git.updateRef({
                        owner,
                        repo,
                        ref,
                        sha: newCommitSHA,
                    });

                    let release = await github.rest.rest.repos.createRelease({
                        owner,
                        repo,
                        tag_name: 'NTK.UI-LITE_${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}',
                    });
                    releaseID = release.data.id
                    //console.log(release.data)
                    releaseFilePath = '/home/runner/work/android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip'
                    let uploadAPK = await github.rest.rest.repos.uploadReleaseAsset({
                        owner,
                        repo,
                        release_id: releaseID,
                        name: 'android-release-${{ env.SHORT_REF_NAME }}-${{ env.SHORT_SHA }}.zip',
                        data: fs.readFileSync(releaseFilePath),
                      });

                    return result;
                } catch (e) {
                // console.log(e)
                // console.log('Error Request: ' + JSON.stringify(e.response))
                // console.log('Error Status: ' + e.status)
                // console.log('Error Response: ' + JSON.stringify(e.response))

                }
              };

              generateGithubPubProc();